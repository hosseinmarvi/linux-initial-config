#!/bin/bash

# Before running this file, please make sure to run an update and reboot.
# To run this file, open Terminal/Tilix and run "chmod +x linux_initial_config" and then "./linux_initial_config"

current_directory=$(pwd)
read -r -p "Please enter your email [Optional]: " user_email

echo "**********INSTALLING REQUIREMENTS**********"
mkdir -p /home/"$USER"/.config/autostart
sudo apt install -y at python3-pip openssl
python3 -m pip install -U pip
python3 -m pip install requests bs4 astral

# install brave
sudo apt install -y apt-transport-https curl gnupg
curl -s https://brave-browser-apt-release.s3.brave.com/brave-core.asc | sudo apt-key --keyring /etc/apt/trusted.gpg.d/brave-browser-release.gpg add -
echo "deb [arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main" | sudo tee /etc/apt/sources.list.d/brave-browser-release.list
sudo apt update
sudo apt install -y brave-browser

# remove other browsers
sudo apt remove -y firefox-esr thunderbird firefox chromium

# install atom
wget -qO - https://packagecloud.io/AtomEditor/atom/gpgkey | sudo apt-key add -
sudo sh -c 'echo "deb [arch=amd64] https://packagecloud.io/AtomEditor/atom/any/ any main" > /etc/apt/sources.list.d/atom.list'
sudo apt update
sudo apt install -y atom

# install miniconda3
wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /home/"$USER"/Downloads/miniconda.sh
bash /home/"$USER"/Downloads/miniconda.sh -b -p /home/"$USER"/.miniconda3 -u
rm /home/"$USER"/Downloads/miniconda.sh
/home/"$USER"/.miniconda3/bin/conda init bash
/home/"$USER"/.miniconda3/bin/conda init zsh
touch /home/"$USER"/.condarc
echo "auto_activate_base: false" > /home/"$USER"/.condarc

# install snapd
sudo apt install -y snapd
sudo snap install core
sudo snap refresh core

# install pycharm
sudo snap install pycharm-professional --classic

# install tools
sudo apt install -y ssh tree xclip

# customization
os_name=$(grep -oP "(?<=^ID=).*" < /etc/os-release)
if [ "${os_name}" = ubuntu ]
then
  echo FIRST CONDITION
  # install git
  sudo add-apt-repository ppa:git-core/ppa -y
  sudo apt update
  sudo apt install -y git

  # install anydesk
  wget -qO - https://keys.anydesk.com/repos/DEB-GPG-KEY | sudo apt-key add -
  echo "deb http://deb.anydesk.com/ all main" | sudo tee /etc/apt/sources.list.d/anydesk-stable.list
  sudo apt update
  sudo apt install -y anydesk

  # install vlc
  sudo apt install -y vlc

  # install grub-customizer
  sudo apt install -y grub-customizer

  # install telegram
  sudo snap install telegram-desktop

  # Add Update to startup apps
  cat << WRITE_UPDATE_AUTOSTART > /home/"$USER"/.config/autostart/update.desktop
[Desktop Entry]
Type=Application
Name=Update
Exec=gnome-terminal -e "update"
X-GNOME-Autostart-enabled=true
WRITE_UPDATE_AUTOSTART

elif [ "${os_name}" = pureos ]
then
  echo SECOND CONDITION
  # install git
  sudo apt install -y git

  # Add Update to startup apps
  cat << WRITE_UPDATE_AUTOSTART > /home/"$USER"/.config/autostart/update.desktop
[Desktop Entry]
Type=Application
Name=Update
Exec=tilix -e "update"
X-GNOME-Autostart-enabled=true
WRITE_UPDATE_AUTOSTART
fi

# update
sudo sh -c 'cat << \WRITE_UPDATE > /usr/local/bin/update
#!/bin/bash


sudo apt update
sudo apt full-upgrade -y
sudo apt upgrade -y
sudo apt autoremove -y

current_directory=`pwd`

echo **********GETTING LATEST VERSION NO.**********
ver=`python3 - << GET_PYTHON_VERSION
import os
import sys
import subprocess
import requests
from bs4 import BeautifulSoup


def verified(ver):
    for c in ver:
        if c not in "0123456789.":
            return False
    return True


def system_version():
    default_directory = "/usr/bin/"
    directory = "/usr/local/bin/"
    versions = []
    for file in os.listdir(default_directory):
        if file.startswith("python") and file != "python" and verified(file[6:]):
            versions.append(float(file.replace("python", "0")))
    for file in os.listdir(directory):
        if file.startswith("python") and file != "python" and verified(file[6:]):
            versions.append(float(file.replace("python", "0")))
    if versions:
        result = max(float(sys.version[:3]), max(versions))
    else:
        result = float(sys.version[:3])
    return subprocess.getoutput(f"python{result} -V").replace("Python ", "")


def latest_version():
    page = requests.get("https://www.python.org").content
    soup = BeautifulSoup(page, "html.parser")
    paragraphs = soup.find_all("p")
    for p in paragraphs:
        if "Latest: " in p:
            return p.find("a").text.replace("Python ", "")


if __name__ == "__main__":
    current = system_version()
    latest = latest_version()
    if current == latest:
        print(0)
    elif current < latest:
        print(latest)

GET_PYTHON_VERSION`

if [ "${ver}" = 0 ]
then
  echo Already up-to-date
else
  sudo apt install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \
  libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev \
  libncursesw5-dev xz-utils tk-dev liblzma-dev

  echo **********DOWNLOADING**********
  wget https://www.python.org/ftp/python/"$ver"/Python-"$ver".tar.xz -P /home/"$USER"/Downloads/

  echo **********EXTRACTING**********
  tar xvf /home/"$USER"/Downloads/Python-"$ver".tar.xz -C /home/"$USER"/Downloads/

  echo **********CONFIGURE**********
  cd /home/"$USER"/Downloads/Python-"$ver"/ || exit
  ./configure --enable-optimizations --with-ensurepip=upgrade

  echo **********MAKE**********
  make -j 8

  echo **********ALTINSTALL**********
  sudo make altinstall

  # echo **********TEST**********
  ver_mm="${ver::3}"
  # python"$ver_mm" -m test

  echo **********UPGRADING PIP**********
  python"$ver_mm" -m pip install -U pip

  echo **********CREATE VIRTUAL ENVIRONMENT**********
  python"$ver_mm" -m venv /home/"$USER"/envs/"${ver//.}"
  echo **********REMOVING DOWNLOADED FILES**********
  cd "$current_directory" || exit
  rm /home/"$USER"/Downloads/Python-"$ver".tar.xz
  sudo rm -rf /home/"$USER"/Downloads/Python-"$ver"/

  python"$ver_mm" -V
fi

exit
$SHELL

WRITE_UPDATE'

sudo chmod +x /usr/local/bin/update
update

# cb as clipboard
cat << WRITE_ALIASES >> /home/"$USER"/.bash_aliases
alias cb="xclip -selection c"

WRITE_ALIASES
chmod +x /home/"$USER"/.bash_aliases
source /home/"$USER"/.bashrc	# update bashrc

# Set Auto-Dark
sudo sh -c 'cat << \WRITE_AUTO_DARK > /usr/local/bin/auto-dark
#!/bin/bash


python3 - << \CHANGE_THEME
import subprocess
from astral import LocationInfo
from astral.sun import sun
import datetime


def sunrise_sunset():
    city = LocationInfo("Cambridge", "England", "Europe/London",
                        52.212754, 0.136735)
    s = sun(city.observer, date=datetime.date.today())
    sunrise_time = s["sunrise"].time().strftime("%H:%M")
    sunset_time = s["sunset"].time().strftime("%H:%M")
    return sunrise_time, sunset_time


os_name = subprocess.getoutput("cat /etc/os-release | grep -oP \"(?<=^ID=).*\"")
now = datetime.datetime.now().time().strftime("%H:%M")
sunrise, sunset = sunrise_sunset()
now_theme = "gsettings set org.gnome.desktop.interface gtk-theme "
remove_at_jobs = "for i in $(atq | cut -f 1); do atrm \"$i\"; done"

day_theme = ""
night_theme = ""
if os_name == "ubuntu":
    day_theme += now_theme + "Yaru"
    night_theme += now_theme + "Yaru-dark"
    if sunrise <= now < sunset:
        now_theme += "Yaru"
    else:
        now_theme += "Yaru-dark"
elif os_name == "pureos":
    day_theme += now_theme + "Adwaita"
    night_theme += now_theme + "Adwaita-dark"
    if sunrise <= now < sunset:
        now_theme += "Adwaita"
    else:
        now_theme += "Adwaita-dark"

schedule_day = f"echo \"{day_theme}\" | at -m {sunrise}"
schedule_night = f"echo \"{night_theme}\" | at -m {sunset}"

subprocess.call(["/bin/bash", "-c", now_theme])
subprocess.call(["/bin/bash", "-c", remove_at_jobs])
subprocess.call(["/bin/bash", "-c", schedule_day])
subprocess.call(["/bin/bash", "-c", schedule_night])

CHANGE_THEME
WRITE_AUTO_DARK'

sudo chmod +x /usr/local/bin/auto-dark

# Add Shortcuts
cat << WRITE_SHORTCUTS > shortcuts.py
#!/usr/bin/env python3
import subprocess


def modify_default_shortcuts(os_):
    main = "gsettings set org.gnome.settings-daemon.plugins.media-keys"
    bindings = {"home": "<Primary><Alt>e", "www": "<Primary><Alt>b"}
    for key, value in bindings.items():
        command = f"{main} {key} "
        if os_ == "ubuntu":
            command += f"\"['{value}']\""
        elif os_ == "pureos":
            command += f"'{value}'"
        subprocess.call(["/bin/bash", "-c", command])


def add_custom_shortcut(os_, **shortcuts):
    key = "org.gnome.settings-daemon.plugins.media-keys custom-keybindings"
    sub_key = f"{key.replace(' ', '.')[:-1]}:"
    item_s = f"/{key.replace(' ', '/').replace('.', '/')}/"
    # get the current list of custom shortcuts
    array_str = subprocess.getoutput(f"gsettings get {key}")
    # in case the array was empty, remove the annotation hints
    command_result = array_str.lstrip("@as")
    current_shortcuts = eval(command_result)
    # make sure the additional keybinding mention is no duplicate
    n = 0
    while True:
        new = f"{item_s}custom{str(n)}/"
        if new not in current_shortcuts:
            break
        n += 1
    # add the new keybinding to the list
    current_shortcuts.append(new)
    # create the shortcut, set the name, command and shortcut key
    name = shortcuts["name"]
    command = shortcuts["command"]
    binding = shortcuts["binding"]
    final_commands = [""] * 4
    final_commands[0] = f"gsettings set {key} \"{str(current_shortcuts)}\""
    final_commands[1] = f"gsettings set {sub_key}{new} name '{name}'"
    final_commands[2] = f"gsettings set {sub_key}{new} command '{command}'"
    final_commands[3] = f"gsettings set {sub_key}{new} binding '{binding}'"
    for cmd in final_commands:
        subprocess.call(["/bin/bash", "-c", cmd])


os_name = subprocess.getoutput("cat /etc/os-release | grep -oP '(?<=^ID=).*'")

modify_default_shortcuts(os_name)
add_custom_shortcut(os_name,
                    name="Auto Dark",
                    command="auto-dark",
                    binding="<Primary><Alt>a")
add_custom_shortcut(os_name,
                    name="Open PyCharm",
                    command="pycharm-professional",
                    binding="<Primary><Alt>p")

values = []

if os_name == "ubuntu":
    values = [{"name": "Update",
               "command": "gnome-terminal -e update",
               "binding": "<Primary><Alt>u"},
              {"name": "Light Theme",
               "command": "gsettings set org.gnome.desktop.interface "
                          "gtk-theme Yaru",
               "binding": "<Primary><Alt>1"},
              {"name": "Dark Theme",
               "command": "gsettings set org.gnome.desktop.interface "
                          "gtk-theme Yaru-dark",
               "binding": "<Primary><Alt>2"},
              {"name": "Open Telegram",
               "command": "telegram-desktop",
               "binding": "<Primary><Alt>j"}]

elif os_name == "pureos":
    values = [{"name": "Open Terminal",
               "command": "tilix",
               "binding": "<Primary><Alt>t"},
              {"name": "Update",
               "command": "tilix -e update",
               "binding": "<Primary><Alt>u"},
              {"name": "Light Theme",
               "command": "gsettings set org.gnome.desktop.interface "
                          "gtk-theme 'Adwaita'",
               "binding": "<Primary><Alt>1"},
              {"name": "Dark Theme",
               "command": "gsettings set org.gnome.desktop.interface "
                          "gtk-theme 'Adwaita-dark'",
               "binding": "<Primary><Alt>2"}]

for keyword_arguments in values:
    add_custom_shortcut(os_name, **keyword_arguments)

WRITE_SHORTCUTS

chmod +x shortcuts.py
./shortcuts.py
rm shortcuts.py

# set startup apps
cat << WRITE_BRAVE > /home/"$USER"/.config/autostart/brave.desktop
[Desktop Entry]
Type=Application
Name=Brave Browser
Exec=brave-browser
X-GNOME-Autostart-enabled=true
WRITE_BRAVE

cat << WRITE_PYCHARM > /home/"$USER"/.config/autostart/pycharm.desktop
[Desktop Entry]
Type=Application
Name=PyCharm Professional
Exec=pycharm-professional
X-GNOME-Autostart-enabled=true
WRITE_PYCHARM

cat << WRITE_AUTODARK > /home/"$USER"/.config/autostart/autodark.desktop
[Desktop Entry]
Type=Application
Name=Auto Dark-Mode
Exec=auto-dark
X-GNOME-Autostart-enabled=true
WRITE_AUTODARK

# change ownership if needed
sudo chown -R "$USER" envs/

# git config
git config --global user.name "$USER"@"$HOSTNAME"
git config --global user.email "$user_email"

# add ssh key
mkdir -p /home/"$USER"/.ssh/
touch /home/"$USER"/.ssh/authorized_keys
ssh-keygen -t ed25519 -C "$user_email" -f /home/"$USER"/.ssh/id_ed25519 -N ""
eval "$(ssh-agent)"
ssh-add /home/"$USER"/.ssh/id_ed25519
xclip -selection c < /home/"$USER"/.ssh/id_ed25519.pub

cd "$current_directory" || exit
echo All Done!
echo "The contents of the public key copied to the clipboard"
echo "You can paste it to your GitHub account settings which will be opened for you"

# open github settings to paste the public key contents
brave-browser https://github.com/settings/ssh/new

exit
$SHELL
